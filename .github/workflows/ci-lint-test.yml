name: CI-lint-test

on:
  push:
    branches: [develop, master]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - 'contents/roki.log/**'
      - 'contents/diary/**'
  pull_request:
    branches: [develop, master]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - 'contents/roki.log/**'
      - 'contents/diary/**'

jobs:
  lint-and-test:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Run TypeScript lint
      run: make check

    - name: Run TypeScript tests with coverage
      run: npm run test:coverage

    - name: Report TypeScript coverage to PR
      if: github.event_name == 'pull_request'
      uses: davelosert/vitest-coverage-report-action@v2

    - name: Get Haskell version
      run: |
        curl -sSLJ \
          "https://github.com/mikefarah/yq/releases/download/${{ env.yq_version }}/yq_linux_amd64.tar.gz" |
          tar xzf - ./yq_linux_amd64
        chmod +x ./yq_linux_amd64
        echo "ghc_version=$(./yq_linux_amd64 '.compiler' ./stack.yaml | cut -f2 -d-)" >> "$GITHUB_ENV"
        echo "stack_version=$(grep BOOTSTRAP_HASKELL_STACK_VERSION ./docker/.env | cut -f2 -d=)" >> "$GITHUB_ENV"
      env:
        yq_version: v4.44.3

    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ env.ghc_version }}
        enable-stack: true
        stack-version: ${{ env.stack_version }}

    - name: Setup Stack
      run: |
        stack config set system-ghc --global true

    - name: Stack cache
      uses: actions/cache@v4
      id: stack-cache
      with:
        path: ~/.stack
        key: stack-test-v1-${{ runner.os }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('package.yaml') }}
        restore-keys: |
          stack-test-v1-${{ runner.os }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}-
          stack-test-v1-${{ runner.os }}-${{ hashFiles('stack.yaml') }}-
          stack-test-v1-${{ runner.os }}-

    - name: Build Haskell dependencies
      run: stack build --only-dependencies --test

    - name: Build Haskell project
      run: stack build --test --no-run-tests

    - name: Run Haskell tests with coverage
      run: stack test --coverage 2>&1 | tee haskell-test-output.txt

    - name: Generate Haskell coverage report
      if: always()
      run: |
        # HPC レポートの場所を特定
        TIX_FILE=$(find .stack-work -name "roki-web-test.tix" -type f | head -n 1)
        if [ -n "$TIX_FILE" ]; then
          TIX_DIR=$(dirname "$TIX_FILE")
          # テキスト形式のカバレッジレポートを生成
          stack hpc report --all 2>&1 | tee haskell-coverage-report.txt || echo "カバレッジレポートの生成に失敗しました" > haskell-coverage-report.txt
        else
          echo "カバレッジファイル (.tix) が見つかりませんでした" > haskell-coverage-report.txt
        fi

    - name: Comment Haskell coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let coverageReport = '';
          try {
            coverageReport = fs.readFileSync('haskell-coverage-report.txt', 'utf8');
          } catch (error) {
            coverageReport = 'カバレッジレポートの読み込みに失敗しました';
          }

          const body = `## Haskell Test Coverage Report

\`\`\`
${coverageReport}
\`\`\`

<sub>Generated by stack hpc report</sub>`;

          // 既存のコメントを検索
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('## Haskell Test Coverage Report')
          );

          if (botComment) {
            // 既存のコメントを更新
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            // 新規コメントを作成
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
