name: CI-pr

on:
  pull_request:
    branches: [develop, master, release, draft]
    types: [synchronize, opened, reopened, ready_for_review]
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Site generator cache
      uses: actions/cache@v3
      id: site-gen-cache
      with:
        path: ./site
        key: site-gen-v1-${{ runner.os }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('src/**') }}-${{ hashFiles('app/**') }}
    - name: Stack cache
      if: steps.site-gen-cache.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      id: stack-cache
      with:
        path: ~/.stack
        key: stack-v2-${{ runner.os }}-${{ hashFiles('stack.yaml') }}
    - name: Setup GHC
      if: steps.site-gen-cache.outputs.cache-hit != 'true'
      uses: haskell/actions/setup@v1
      with:
        ghc-version: '8.8.3'
        enable-stack: true
        stack-version: '2.7.3'
    - name: Setup XMLlint
      uses: awalsh128/cache-apt-pkgs-action@v1.2.2
      with:
        packages: libxml2-utils
        version: 1.0
    - name: Setup Stack
      if: steps.site-gen-cache.outputs.cache-hit != 'true' && steps.stack-cache.outputs.cache-hit != 'true'
      run: |
        stack config set system-ghc --global true
        stack config set install-ghc --global false
    - name: Read Node version
      uses: browniebroke/read-nvmrc-action@v1
      id: nvmrc
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: '${{ steps.nvmrc.outputs.node_version }}'
    - name: Node module cache
      uses: actions/cache@v3
      id: node-cache
      with:
        path: '**/node_modules'
        key: node-v1-${{ runner.os }}-${{ hashFiles('.nvmrc') }}-${{ hashFiles('package.json') }}-${{ hashFiles('package-lock.json') }}
    - name: Install Node dependencies
      if: steps.node-cache.outputs.cache-hit != 'true'
      run: npm ci
    - name: Build the roki.dev generator
      if: steps.site-gen-cache.outputs.cache-hit != 'true'
      run: |
        stack --local-bin-path . install --flag hakyll:-previewServer --flag hakyll:-watchServer
        ./site --version
    - name: Docs cache
      uses: actions/cache@v3
      id: docs-cache
      with:
        path: './docs'
        key: docs-v1-${{ runner.os }}
    - name: Build and validate roki.dev
      run: |
        ./site build
        ./site check --internal-links
        xmllint docs/roki.log/sitemap.xml --noout
        xmllint docs/roki.log/feed/roki.log.xml --noout
        xmllint docs/roki.diary/sitemap.xml --noout
        xmllint docs/roki.diary/feed/roki.diary.xml --noout
        tar cvf docs.tar.xz docs
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: roki.dev
        path: docs.tar.xz
  upload:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Fetch archive
      uses: actions/download-artifact@v2
      with:
        name: roki.dev
    - name: Skicka cache
      uses: actions/cache@v2
      id: skicka-cache
      with:
        path: |
          ~/.go
          ~/.cache/go-build
          ~/.skicka.tokencache.json
          ~/.skicka.config
          ~/.skicka.metadata.cache
        key: go-v2-${{ runner.os }}
    - name: Setup Go Path
      run: |
        echo "GOPATH=$HOME/.go" >> $GITHUB_ENV
        echo "$HOME/.go/bin:$PATH" >> $GITHUB_PATH
    - name: Setup Skicka
      if: steps.skicka-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        wget -q https://dl.google.com/go/go1.17.9.linux-amd64.tar.gz
        tar -C "$HOME" -xzf go1.17.9.linux-amd64.tar.gz
        mv "$HOME/go" "$HOME/.go"
        go install github.com/google/skicka@latest
        skicka init
        echo -n "$SKICKA_TOKENCACHE_JSON" > "$HOME/.skicka.tokencache.json"
        sed -i -e "s/;clientid=YOUR_GOOGLE_APP_CLIENT_ID/clientid=$GOOGLE_CLIENT_ID/g" "$HOME/.skicka.config"
        sed -i -e "s/;clientsecret=YOUR_GOOGLE_APP_SECRET/clientsecret=$GOOGLE_CLIENT_SECRET/g" "$HOME/.skicka.config"
      env:
        SKICKA_TOKENCACHE_JSON: ${{ secrets.SKICKA_TOKENCACHE_JSON }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
    - name: Upload to Google Drive
      run: |
        skicka -no-browser-auth upload -ignore-times \
          ./docs.tar.xz \
          CI_WORK/GitHubActions/${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}/${{ github.sha }}-docs.tar.xz
  boot-circle-ci:
    runs-on: ubuntu-latest
    needs: upload
    steps:
    - name: Boot CircleCI
      run: |
          echo CIRCLE_RESP=$(curl -s -X POST \
            -H "Circle-Token: ${{ secrets.CIRCLE_API_USER_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"branch":"${{ github.event.pull_request.head.ref }}","parameters":{"GITHUB_SHA":"${{ github.sha }}"}}' \
            https://circleci.com/api/v2/project/gh/${{ github.repository }}/pipeline) >> $GITHUB_ENV
    - name: Set CircleCI variables
      id: cc
      run: |
          echo "CIRCLE_JOB_NUM=$(echo '${{ env.CIRCLE_RESP }}' | jq .number)" >> $GITHUB_ENV
          echo "CIRCLE_JOB_ID=$(echo '${{ env.CIRCLE_RESP }}' | jq .id)" >> $GITHUB_ENV
    - name: Out CircleCI URL
      run: echo "https://app.circleci.com/pipelines/github/${{ github.repository }}/${{ env.CIRCLE_JOB_NUM }}/workflows/${{ env.CIRCLE_JOB_ID }}/jobs/${{ env.CIRCLE_JOB_NUM }}/steps"
