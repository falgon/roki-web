name: manually-gh-registry
on:
  workflow_dispatch:
    inputs:
      to_push:
        description: 'Push the built containers'
        required: true
        default: false
        type: boolean
      enable_notify:
        description: 'Send notification after image build'
        required: true
        default: true
        type: boolean
  push:
    branches: [master]
    tags:
      - v*
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
jobs:
  setup:
    runs-on: ubuntu-24.04
    if: github.repository == 'falgon/roki-web'
    outputs:
      img_tag: ${{ steps.img_tag_step.outputs.name }}
      env_img_name: ${{ steps.env_img_step.outputs.name }}
      dev_img_name: ${{ steps.dev_img_step.outputs.name }}
      env_gh_registry: ${{ steps.env_registry_step.outputs.name }}
      dev_gh_registry: ${{ steps.dev_registry_step.outputs.name }}
      to_push: ${{ steps.to_push_step.outputs.flag }}
      enable_notify: ${{ steps.enable_notify_step.outputs.flag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup environment variables
      run: |
        ENV_IMAGE_NAME=$(cat ./docker/.env | grep ROKI_WEB_ENV_IMAGE_NAME | cut -f2 -d=)
        DEV_IMAGE_NAME=$(cat ./docker/.env | grep ROKI_WEB_DEV_IMAGE_NAME | cut -f2 -d=)
        echo "ENV_IMAGE_NAME=$ENV_IMAGE_NAME" >> $GITHUB_ENV
        echo "DEV_IMAGE_NAME=$DEV_IMAGE_NAME" >> $GITHUB_ENV
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        [[ "${{ github.ref }}" = "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        IMAGE_TAG=$(test $VERSION = master && echo latest || echo $VERSION)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "ENV_GH_REGISTRY=ghcr.io/${{ github.repository_owner }}/$(echo $ENV_IMAGE_NAME | cut -f2 -d/):$IMAGE_TAG" >> $GITHUB_ENV
        echo "DEV_GH_REGISTRY=ghcr.io/${{ github.repository_owner }}/$(echo $DEV_IMAGE_NAME | cut -f2 -d/):$IMAGE_TAG" >> $GITHUB_ENV
        [[ "${{ github.event_name }}" = "push" ]] && TO_PUSH=true || TO_PUSH=${{ github.event.inputs.to_push }}
        echo "TO_PUSH=$TO_PUSH" >> $GITHUB_ENV
        [[ "${{ github.event_name }}" = "push" ]] && ENABLE_NOTIFY=false || ENABLE_NOTIFY=${{ github.event.inputs.enable_notify }}
        echo "ENABLE_NOTIFY=$ENABLE_NOTIFY" >> $GITHUB_ENV
    - name: Set the image tag outputs
      id: img_tag_step
      run: echo "name=$IMAGE_TAG" >> $GITHUB_OUTPUT
    - name: Set env image outputs
      id: env_img_step
      run: echo "name=$ENV_IMAGE_NAME" >> $GITHUB_OUTPUT
    - name: Set dev image outputs
      id: dev_img_step
      run: echo "name=$DEV_IMAGE_NAME" >> $GITHUB_OUTPUT
    - name: Set env registry outputs
      if: ${{ env.TO_PUSH == 'true' }}
      id: env_registry_step
      run: echo "name=$ENV_GH_REGISTRY" >> $GITHUB_OUTPUT
    - name: Set dev registry outputs
      if: ${{ env.TO_PUSH == 'true' }}
      id: dev_registry_step
      run: echo "name=$DEV_GH_REGISTRY" >> $GITHUB_OUTPUT
    - name: Set to_push flag outputs
      id: to_push_step
      run: echo "flag=$TO_PUSH" >> $GITHUB_OUTPUT
    - name: Set enable_notify flag outputs
      id: enable_notify_step
      run: echo "flag=$ENABLE_NOTIFY" >> $GITHUB_OUTPUT
  build-env-image:
    runs-on: ubuntu-24.04
    needs: setup
    if: github.repository == 'falgon/roki-web'
    outputs:
      success: ${{ steps.build.conclusion == 'success' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Clear disk space
      run: |
        docker system prune -a --volumes -f
        sudo rm -rf "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        df -h
    - name: Login to GitHub Container Registry
      if: needs.setup.outputs.to_push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push AMD64 env image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64
        target: apps
        push: ${{ needs.setup.outputs.to_push == 'true' }}
        tags: |
          ${{ needs.setup.outputs.to_push == 'true' && needs.setup.outputs.env_gh_registry || format('{0}:{1}', needs.setup.outputs.env_img_name, needs.setup.outputs.img_tag) }}
        cache-from: |
          type=gha,scope=env
          type=gha,scope=base
          type=gha,scope=deps
          type=gha,scope=build
        cache-to: |
          type=gha,mode=max,scope=env
          type=gha,mode=max,scope=base
          type=gha,mode=max,scope=deps
          type=gha,mode=max,scope=build
        provenance: false
        sbom: false
    - name: Record build status
      if: always()
      run: |
        if [[ "${{ steps.build.outcome }}" != "success" ]]; then
          echo "::warning::Env image build failed"
        fi
  build-dev-image:
    runs-on: ubuntu-24.04
    needs: setup
    if: github.repository == 'falgon/roki-web'
    outputs:
      success: ${{ steps.build.conclusion == 'success' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Clear disk space
      run: |
        docker system prune -a --volumes -f
        sudo rm -rfv "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
    - name: Login to GitHub Container Registry
      if: needs.setup.outputs.to_push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push AMD64 dev image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64
        target: dev
        push: ${{ needs.setup.outputs.to_push == 'true' }}
        tags: |
          ${{ needs.setup.outputs.to_push == 'true' && needs.setup.outputs.dev_gh_registry || format('{0}:{1}', needs.setup.outputs.dev_img_name, needs.setup.outputs.img_tag) }}
        cache-from: type=gha,scope=dev
        cache-to: type=gha,mode=max,scope=dev
        provenance: false
        sbom: false
    - name: Record build status
      if: always()
      run: |
        if [[ "${{ steps.build.outcome }}" != "success" ]]; then
          echo "::warning::Dev image build failed"
        fi
  notify-email:
    runs-on: ubuntu-24.04
    needs: [setup, build-env-image, build-dev-image]
    if: ${{ needs.setup.result == 'success' && needs.setup.outputs.enable_notify == 'true' && github.repository == 'falgon/roki-web' &&
      needs['build-env-image'].outputs.success == 'true' &&
      needs['build-dev-image'].outputs.success == 'true' }}
    environment:
      name: manually-gh-registry
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          tools/github-actions
    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        enable-stack: true
        stack-version: 'latest'
    - name: Cache Stack dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.stack
          ~/.stack-work
          tools/github-actions/.stack-work
        key: ${{ runner.os }}-stack-notify-v2-${{ hashFiles('tools/github-actions/NotifyBuildCompletion.hs') }}
        restore-keys: |
          ${{ runner.os }}-stack-notify-v2-
          ${{ runner.os }}-stack-
    - name: Cache Stack package index
      uses: actions/cache@v4
      with:
        path: ~/.stack/pantry
        key: ${{ runner.os }}-stack-pantry-v2-${{ hashFiles('tools/github-actions/NotifyBuildCompletion.hs') }}
        restore-keys: |
          ${{ runner.os }}-stack-pantry-v2-
    - name: Install dependencies
      run: |
        # Extract packages from the script header
        PACKAGES=$(grep -o "package [a-z-]*" tools/github-actions/NotifyBuildCompletion.hs | sed 's/package //' | tr '\n' ' ')
        # Pre-install packages to populate cache
        stack --resolver lts-22.33 build $PACKAGES --only-dependencies
    - name: Send Email Notification
      env:
        GMAIL_SENDER: ${{ secrets.GMAIL_SENDER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        NOTIFICATION_TO_EMAIL: ${{ secrets.NOTIFICATION_TO_EMAIL }}
      run: |
        stack tools/github-actions/NotifyBuildCompletion.hs \
          --repository "${{ github.repository }}" \
          --image-tag "${{ needs.setup.outputs.img_tag }}" \
          --run-id "${{ github.run_id }}" \
          --actions-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
