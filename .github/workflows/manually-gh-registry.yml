name: manually-gh-registry
on:
  workflow_dispatch:
    inputs:
      to_push:
        description: 'Push the built containers'
        required: true
        default: false
        type: boolean
      enable_notify:
        description: 'Send notification after image build'
        required: true
        default: true
        type: boolean
  push:
    branches: [master]
    tags:
      - v*
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
jobs:
  setup:
    runs-on: ubuntu-24.04
    if: github.repository == 'falgon/roki-web'
    outputs:
      img_tag: ${{ steps.img_tag_step.outputs.name }}
      env_img_name: ${{ steps.env_img_step.outputs.name }}
      dev_img_name: ${{ steps.dev_img_step.outputs.name }}
      env_gh_registry: ${{ steps.env_registry_step.outputs.name }}
      dev_gh_registry: ${{ steps.dev_registry_step.outputs.name }}
      to_push: ${{ steps.to_push_step.outputs.flag }}
      enable_notify: ${{ steps.enable_notify_step.outputs.flag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup environment variables
      run: |
        ENV_IMAGE_NAME=$(cat ./docker/.env | grep ROKI_WEB_ENV_IMAGE_NAME | cut -f2 -d=)
        DEV_IMAGE_NAME=$(cat ./docker/.env | grep ROKI_WEB_DEV_IMAGE_NAME | cut -f2 -d=)
        echo "ENV_IMAGE_NAME=$ENV_IMAGE_NAME" >> $GITHUB_ENV
        echo "DEV_IMAGE_NAME=$DEV_IMAGE_NAME" >> $GITHUB_ENV
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        [[ "${{ github.ref }}" = "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        IMAGE_TAG=$(test $VERSION = master && echo latest || echo $VERSION)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "ENV_GH_REGISTRY=ghcr.io/${{ github.repository_owner }}/$(echo $ENV_IMAGE_NAME | cut -f2 -d/):$IMAGE_TAG" >> $GITHUB_ENV
        echo "DEV_GH_REGISTRY=ghcr.io/${{ github.repository_owner }}/$(echo $DEV_IMAGE_NAME | cut -f2 -d/):$IMAGE_TAG" >> $GITHUB_ENV
        [[ "${{ github.event_name }}" = "push" ]] && TO_PUSH=true || TO_PUSH=${{ github.event.inputs.to_push }}
        echo "TO_PUSH=$TO_PUSH" >> $GITHUB_ENV
        [[ "${{ github.event_name }}" = "push" ]] && ENABLE_NOTIFY=false || ENABLE_NOTIFY=${{ github.event.inputs.enable_notify }}
        echo "ENABLE_NOTIFY=$ENABLE_NOTIFY" >> $GITHUB_ENV
    - name: Set the image tag outputs
      id: img_tag_step
      run: echo "name=$IMAGE_TAG" >> $GITHUB_OUTPUT
    - name: Set env image outputs
      id: env_img_step
      run: echo "name=$ENV_IMAGE_NAME" >> $GITHUB_OUTPUT
    - name: Set dev image outputs
      id: dev_img_step
      run: echo "name=$DEV_IMAGE_NAME" >> $GITHUB_OUTPUT
    - name: Set env registry outputs
      if: ${{ env.TO_PUSH == 'true' }}
      id: env_registry_step
      run: echo "name=$ENV_GH_REGISTRY" >> $GITHUB_OUTPUT
    - name: Set dev registry outputs
      if: ${{ env.TO_PUSH == 'true' }}
      id: dev_registry_step
      run: echo "name=$DEV_GH_REGISTRY" >> $GITHUB_OUTPUT
    - name: Set to_push flag outputs
      id: to_push_step
      run: echo "flag=$TO_PUSH" >> $GITHUB_OUTPUT
    - name: Set enable_notify flag outputs
      id: enable_notify_step
      run: echo "flag=$ENABLE_NOTIFY" >> $GITHUB_OUTPUT
  build-env-image-amd64:
    runs-on: ubuntu-24.04
    needs: setup
    if: github.repository == 'falgon/roki-web'
    outputs:
      success: ${{ steps.build.outcome == 'success' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Clear disk space
      run: |
        docker system prune -a --volumes -f
        sudo rm -rf "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        df -h
    - name: Login to GitHub Container Registry
      if: needs.setup.outputs.to_push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push AMD64 env image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64
        target: apps
        push: ${{ needs.setup.outputs.to_push == 'true' }}
        tags: |
          ${{ needs.setup.outputs.to_push == 'true' && format('{0}-amd64', needs.setup.outputs.env_gh_registry) || format('{0}:{1}-amd64', needs.setup.outputs.env_img_name, needs.setup.outputs.img_tag) }}
        cache-from: |
          type=gha,scope=env-amd64
          type=gha,scope=base-amd64
          type=gha,scope=deps-amd64
          type=gha,scope=build-amd64
        cache-to: |
          type=gha,mode=max,scope=env-amd64
          type=gha,mode=max,scope=base-amd64
          type=gha,mode=max,scope=deps-amd64
          type=gha,mode=max,scope=build-amd64
    - name: Record build status
      if: always()
      run: |
        if [[ "${{ steps.build.outcome }}" != "success" ]]; then
          echo "::warning::AMD64 env image build failed"
        fi
  build-env-image-arm64:
    runs-on: ubuntu-24.04
    timeout-minutes: 330  # 5時間30分で早期終了
    needs: setup
    if: github.repository == 'falgon/roki-web'
    outputs:
      success: ${{ steps.build.outcome == 'success' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-config-inline: |
          [worker.oci]
            gc = true
            gckeepstorage = 20000
        driver-opts: |
          image=moby/buildkit:buildx-stable-1
          network=host
    - name: Clear disk space
      run: |
        docker system prune -a --volumes -f
        sudo rm -rf "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        df -h
    - name: Login to GitHub Container Registry
      if: needs.setup.outputs.to_push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push ARM64 env image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/arm64
        target: apps
        push: ${{ needs.setup.outputs.to_push == 'true' }}
        tags: |
          ${{ needs.setup.outputs.to_push == 'true' && format('{0}-arm64', needs.setup.outputs.env_gh_registry) || format('{0}:{1}-arm64', needs.setup.outputs.env_img_name, needs.setup.outputs.img_tag) }}
        cache-from: |
          type=gha,scope=env-arm64
          type=gha,scope=base-arm64
          type=gha,scope=deps-arm64
          type=gha,scope=build-arm64
          ${{ needs.setup.outputs.to_push == 'true' && format('type=registry,ref=ghcr.io/{0}/roki-web-env:cache-arm64', github.repository_owner) || '' }}
        cache-to: |
          type=gha,mode=max,scope=env-arm64
          type=gha,mode=max,scope=base-arm64
          type=gha,mode=max,scope=deps-arm64
          type=gha,mode=max,scope=build-arm64
          ${{ needs.setup.outputs.to_push == 'true' && format('type=registry,mode=max,ref=ghcr.io/{0}/roki-web-env:cache-arm64', github.repository_owner) || '' }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    - name: Record build status
      if: always()
      run: |
        if [[ "${{ steps.build.outcome }}" != "success" ]]; then
          echo "::warning::ARM64 env image build failed"
        fi
  build-dev-image-amd64:
    runs-on: ubuntu-24.04
    needs: setup
    if: github.repository == 'falgon/roki-web'
    outputs:
      success: ${{ steps.build.outcome == 'success' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Clear disk space
      run: |
        docker system prune -a --volumes -f
        sudo rm -rfv "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
    - name: Login to GitHub Container Registry
      if: needs.setup.outputs.to_push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push AMD64 dev image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64
        target: dev
        push: ${{ needs.setup.outputs.to_push == 'true' }}
        tags: |
          ${{ needs.setup.outputs.to_push == 'true' && format('{0}-amd64', needs.setup.outputs.dev_gh_registry) || format('{0}:{1}-amd64', needs.setup.outputs.dev_img_name, needs.setup.outputs.img_tag) }}
        cache-from: type=gha,scope=dev-amd64
        cache-to: type=gha,mode=max,scope=dev-amd64
    - name: Record build status
      if: always()
      run: |
        if [[ "${{ steps.build.outcome }}" != "success" ]]; then
          echo "::warning::AMD64 dev image build failed"
        fi
  build-dev-image-arm64:
    runs-on: ubuntu-24.04
    timeout-minutes: 350  # 5時間50分のタイムアウト（6時間制限前に終了）
    needs: setup
    if: github.repository == 'falgon/roki-web'
    outputs:
      success: ${{ steps.build.outcome == 'success' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-config-inline: |
          [worker.oci]
            gc = true
            gckeepstorage = 20000
        driver-opts: |
          image=moby/buildkit:buildx-stable-1
          network=host
    - name: Clear disk space
      run: |
        docker system prune -a --volumes -f
        sudo rm -rfv "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
    - name: Login to GitHub Container Registry
      if: needs.setup.outputs.to_push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push ARM64 dev image
      id: build
      continue-on-error: true
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/arm64
        target: dev
        push: ${{ needs.setup.outputs.to_push == 'true' }}
        tags: |
          ${{ needs.setup.outputs.to_push == 'true' && format('{0}-arm64', needs.setup.outputs.dev_gh_registry) || format('{0}:{1}-arm64', needs.setup.outputs.dev_img_name, needs.setup.outputs.img_tag) }}
        cache-from: type=gha,scope=dev-arm64
        cache-to: type=gha,mode=max,scope=dev-arm64
    - name: Record build status
      if: always()
      run: |
        if [[ "${{ steps.build.outcome }}" != "success" ]]; then
          echo "::warning::ARM64 dev image build failed"
        fi
  create-manifest:
    runs-on: ubuntu-24.04
    needs: [setup, build-env-image-amd64, build-env-image-arm64, build-dev-image-amd64, build-dev-image-arm64]
    if: ${{ always() && github.repository == 'falgon/roki-web' && needs.setup.result == 'success' &&
      needs.setup.outputs.to_push == 'true' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          .github/scripts
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Create and push multi-arch manifest for env image
      run: |
        set -euo pipefail
        source .github/scripts/docker-manifest-utils.sh

        create_and_push_manifest \
          "${{ needs.setup.outputs.env_gh_registry }}" \
          "${{ needs['build-env-image-amd64'].outputs.success }}" \
          "${{ needs['build-env-image-arm64'].outputs.success }}"
    - name: Create and push multi-arch manifest for dev image
      run: |
        set -euo pipefail
        source .github/scripts/docker-manifest-utils.sh

        create_and_push_manifest \
          "${{ needs.setup.outputs.dev_gh_registry }}" \
          "${{ needs['build-dev-image-amd64'].outputs.success }}" \
          "${{ needs['build-dev-image-arm64'].outputs.success }}"
    - name: Fail workflow when builds are missing
      if: always()
      run: |
        set -euo pipefail
        failures=()
        [[ "${{ needs['build-env-image-amd64'].outputs.success }}" != 'true' ]] && failures+=("build-env-image-amd64")
        [[ "${{ needs['build-env-image-arm64'].outputs.success }}" != 'true' ]] && failures+=("build-env-image-arm64")
        [[ "${{ needs['build-dev-image-amd64'].outputs.success }}" != 'true' ]] && failures+=("build-dev-image-amd64")
        [[ "${{ needs['build-dev-image-arm64'].outputs.success }}" != 'true' ]] && failures+=("build-dev-image-arm64")
        if [ ${#failures[@]} -gt 0 ]; then
          echo "::error::One or more builds failed: ${failures[*]}"
          exit 1
        fi
  notify-email:
    runs-on: ubuntu-24.04
    needs: [setup, build-env-image-amd64, build-env-image-arm64, build-dev-image-amd64, build-dev-image-arm64]
    if: ${{ needs.setup.result == 'success' && needs.setup.outputs.enable_notify == 'true' && github.repository == 'falgon/roki-web' &&
      needs['build-env-image-amd64'].outputs.success == 'true' &&
      needs['build-env-image-arm64'].outputs.success == 'true' &&
      needs['build-dev-image-amd64'].outputs.success == 'true' &&
      needs['build-dev-image-arm64'].outputs.success == 'true' }}
    environment:
      name: manually-gh-registry
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          tools/github-actions
    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        enable-stack: true
        stack-version: 'latest'
    - name: Cache Stack dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.stack
          ~/.stack-work
          tools/github-actions/.stack-work
        key: ${{ runner.os }}-stack-notify-v2-${{ hashFiles('tools/github-actions/NotifyBuildCompletion.hs') }}
        restore-keys: |
          ${{ runner.os }}-stack-notify-v2-
          ${{ runner.os }}-stack-
    - name: Cache Stack package index
      uses: actions/cache@v4
      with:
        path: ~/.stack/pantry
        key: ${{ runner.os }}-stack-pantry-v2-${{ hashFiles('tools/github-actions/NotifyBuildCompletion.hs') }}
        restore-keys: |
          ${{ runner.os }}-stack-pantry-v2-
    - name: Install dependencies
      run: |
        # Extract packages from the script header
        PACKAGES=$(grep -o "package [a-z-]*" tools/github-actions/NotifyBuildCompletion.hs | sed 's/package //' | tr '\n' ' ')
        # Pre-install packages to populate cache
        stack --resolver lts-22.33 build $PACKAGES --only-dependencies
    - name: Send Email Notification
      env:
        GMAIL_SENDER: ${{ secrets.GMAIL_SENDER }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        NOTIFICATION_TO_EMAIL: ${{ secrets.NOTIFICATION_TO_EMAIL }}
      run: |
        stack tools/github-actions/NotifyBuildCompletion.hs \
          --repository "${{ github.repository }}" \
          --image-tag "${{ needs.setup.outputs.img_tag }}" \
          --run-id "${{ github.run_id }}" \
          --actions-url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
