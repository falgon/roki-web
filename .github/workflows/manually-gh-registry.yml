name: manually-gh-registry
on:
  workflow_dispatch:
    inputs:
      to_push:
        description: 'push the built container'
        required: true
        default: false
        type: boolean
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.repository == 'falgon/roki-web'
    outputs:
      env_img_name: ${{ steps.env_img_step.outputs.name }}
      dev_img_name: ${{ steps.dev_img_step.outputs.name }}
      env_gh_registry: ${{ steps.env_registry_step.outputs.name }}
      dev_gh_registry: ${{ steps.dev_registry_step.outputs.name }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Setup environment variables
      run: |
        ENV_IMAGE_NAME=$(cat ./docker/.env | grep ROKI_WEB_ENV_IMAGE_NAME | cut -f2 -d=)
        DEV_IMAGE_NAME=$(cat ./docker/.env | grep ROKI_WEB_DEV_IMAGE_NAME | cut -f2 -d=)
        echo "ENV_IMAGE_NAME=$ENV_IMAGE_NAME" >> $GITHUB_ENV
        echo "DEV_IMAGE_NAME=$DEV_IMAGE_NAME" >> $GITHUB_ENV
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        [[ "${{ github.ref }}" = "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        IMAGE_TAG=$(test $VERSION = master && echo latest || echo $VERSION)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "ENV_GH_REGISTRY=docker.pkg.github.com/${{ github.repository }}/$(echo $ENV_IMAGE_NAME | cut -f2 -d/):$IMAGE_TAG" >> $GITHUB_ENV
        echo "DEV_GH_REGISTRY=docker.pkg.github.com/${{ github.repository }}/$(echo $DEV_IMAGE_NAME | cut -f2 -d/):$IMAGE_TAG" >> $GITHUB_ENV
    - name: Set env image outputs
      id: env_img_step
      run: echo "::set-output name=name::$ENV_IMAGE_NAME"
    - name: Set dev image outputs
      id: dev_img_step
      run: echo "::set-output name=name::$DEV_IMAGE_NAME"
    - name: Set env registry outputs
      id: env_registry_step
      run: echo "::set-output name=name::$ENV_GH_REGISTRY"
    - name: Set dev registry outputs
      id: dev_registry_step
      run: echo "::set-output name=name::$DEV_GH_REGISTRY"
    - name: Login GitHub Registry
      if: ${{ github.event.inputs.to_push == 'true' }}
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u owner --password-stdin
    - name: Build Image
      shell: bash
      run: |
        ROKI_WEB_ENV_IMAGE_TAG=$IMAGE_TAG ROKI_WEB_DEV_IMAGE_TAG=$IMAGE_TAG pushd ./docker && \
          docker-compose build --no-cache preview dev; \
        popd
        docker save $ENV_IMAGE_NAME > /tmp/env_img.tar
        docker save $DEV_IMAGE_NAME > /tmp/dev_img.tar
    - name: Upload the env image
      uses: actions/upload-artifact@v2
      with:
        name: env_img
        path: /tmp/env_img.tar
    - name: Upload the dev image
      uses: actions/upload-artifact@v2
      with:
        name: dev_img
        path: /tmp/dev_img.tar
  push:
    runs-on: ubuntu-20.04
    needs: build
    if: ${{ github.event.inputs.to_push == 'true' }}
    steps:
    - name: Download the env image
      uses: actions/download-artifact@v2
      with:
        name: env_img
        path: /tmp
    - name: Download the dev image
      uses: actions/download-artifact@v2
      with:
        name: dev_img
        path: /tmp
    - name: Load images
      shell: bash
      run: |
        docker load --input /tmp/env_img.tar
        docker load --input /tmp/dev_img.tar
    - name: Push to GitHub Package Registry
      shell: bash
      run: |
        docker tag ${{ needs.build.outputs.env_img_name }} ${{ needs.build.outputs.env_gh_registry }}
        docker tag ${{ needs.build.outputs.dev_img_name }} ${{ needs.build.outputs.dev_gh_registry }} 
        docker push ${{ needs.build.outputs.env_gh_registry }}
        docker push ${{ needs.build.outputs.dev_gh_registry }}
