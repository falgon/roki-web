version: 2.1
parameters:
  TARGET_REF:
    type: string
    default: ""
  GDRIVE_PATH:
    type: string
    default: ""
  ENABLE_PR_COMMENT:
    type: boolean
    default: false
  ARTIFACT_PATH:
    type: string
    default: "index.html"

jobs:
  build:
    docker:
    - image: cimg/go:1.24.7
    resource_class: large
    environment:
      TZ: /usr/share/zoneinfo/Asia/Tokyo
    steps:
    - checkout
    - run:
        name: Set up environments
        command: |
          git -c advice.detachedHead=false checkout << pipeline.parameters.TARGET_REF >>
          echo 'export GOPATH="$HOME/.go"' >> $BASH_ENV
          echo 'export PATH="$HOME/.go/bin:$PATH"' >> $BASH_ENV
          echo "export ARTIFACTS_URL=\"https://output.circle-artifacts.com/output/job/$CIRCLE_WORKFLOW_JOB_ID/artifacts/$CIRCLE_NODE_INDEX/<< pipeline.parameters.ARTIFACT_PATH >>\"" >> $BASH_ENV
          echo 'export ARTIFACTS_GDRIVE_PATH="<< pipeline.parameters.GDRIVE_PATH >>"' >> $BASH_ENV
          source "$BASH_ENV"
    - restore_cache:
        key: skicka-2023-10-11-latest
    - run:
        name: Setup tools
        command: |
          sudo apt-get -qq update && sudo apt-get install -qq -y --no-install-recommends jq nkf
          if ! hash skicka 2>/dev/null; then
            go install github.com/google/skicka@latest
            skicka init
            echo -n "$SKICKA_TOKEN_CACHE_JSON" | base64 --decode > $HOME/.skicka.tokencache.json
            sed -i -e "s/;clientid=YOUR_GOOGLE_APP_CLIENT_ID/clientid=$GOOGLE_CLIENT_ID/g" $HOME/.skicka.config
            sed -i -e "s/;clientsecret=YOUR_GOOGLE_APP_SECRET/clientsecret=$GOOGLE_CLIENT_SECRET/g" $HOME/.skicka.config
          fi
          curl -sSL https://get.haskellstack.org/ | sh
    - save_cache:
        key: skicka-2023-10-11-latest
        paths:
          - ~/.go/bin
          - ~/.cache/go-build
          - ~/.skicka.tokencache.json
          - ~/.skicka.config
    - run:
        name: Fetch artifact from Google Drive
        command: |
          skicka -no-browser-auth download -ignore-times "$ARTIFACTS_GDRIVE_PATH" docs.tar.xz
          tar xvf docs.tar.xz
          skicka -no-browser-auth rm "$ARTIFACTS_GDRIVE_PATH"
    - store_artifacts:
        path: ./docs/
        destination: .
    - when:
        condition: << pipeline.parameters.ENABLE_PR_COMMENT >>
        steps:
          - run:
              name: Add comment
              command: |
                echo "export PR_RESPONSE_TMP=$(mktemp)" >> $BASH_ENV
                source "$BASH_ENV"
                curl -s --location --request GET \
                  -H "Authorization: token $YBGH_TOKEN" \
                  "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" > $PR_RESPONSE_TMP
                if [ -z "$(cat $PR_RESPONSE_TMP)" ]; then
                  echo "No PR found to update"
                else
                  readonly pr_comment_url=$(jq -r ".[]._links.comments.href" "$PR_RESPONSE_TMP")
                  readonly status_badge_endpoint='https://dl.circleci.com/status-badge'
                  function urlencode {
                    echo "$1" | nkf -WwMQ | sed 's/=$//g' | tr = % | tr -d '\n'
                  }
                  readonly encoded_user="$(urlencode "$CIRCLE_PROJECT_USERNAME")"
                  readonly encoded_repo="$(urlencode "$CIRCLE_PROJECT_REPONAME")"
                  readonly encoded_branch="$(urlencode "$CIRCLE_BRANCH")"
                  readonly badge="[![CircleCI]($status_badge_endpoint/img/gh/$encoded_user/$encoded_repo/tree/$encoded_branch.svg?style=svg)]($status_badge_endpoint/redirect/gh/$encoded_user/$encoded_repo/tree/$encoded_branch)"
                  readonly details="\r\n<hr /><details><summary>more info</summary><p><ul><li>:cloud: Storage $(skicka df | grep 'Free space')</li><li>:open_file_folder: $(skicka du ${ARTIFACTS_GDRIVE_PATH%/*} | sed 's/^[ \t]*//')</li></ul></p></details>"
                  readonly data='{"body":"*'" $badge\r\n"'* [Build log]('"$CIRCLE_BUILD_URL)\r\n"'* [Preview build]('"$ARTIFACTS_URL"') with this PR (<< pipeline.parameters.TARGET_REF >>)'"$details"'"}'
                  readonly post_result=$(curl -fsX POST \
                    -H "Authorization: token $YBGH_TOKEN" \
                    -H 'Content-Type:application/json' \
                    -d "$data" \
                    "$pr_comment_url")
                  echo "$post_result" | jq -r '.html_url'
                fi
    - restore_cache:
        key: v1-notify-email-{{ checksum "tools/circleci/NotifyEmail.hs" }}
    - run:
        name: Notify Email
        command: |
          if << pipeline.parameters.ENABLE_PR_COMMENT >>; then
            if [ -z "$(cat $PR_RESPONSE_TMP)" ]; then
              echo "No PR found to update"
              circleci-agent step halt
            else
              readonly pr_url=$(jq -r ".[]._links.html.href" "$PR_RESPONSE_TMP")
            fi
          else
            readonly pr_url="none"
          fi
          # eval is needed for the CIRCLE_WORKING_DIRECTORY variable as it contains a non-expanded '~'
          eval ${CIRCLE_WORKING_DIRECTORY}/tools/circleci/NotifyEmail.hs \
            --pr-url "$pr_url" \
            --artifacts-url "$ARTIFACTS_URL" \
            --from-email "$FROM_EMAIL" \
            --to-email "$TO_EMAIL"

    - save_cache:
        key: v1-notify-email-{{ checksum "tools/circleci/NotifyEmail.hs" }}
        paths:
          - ~/.stack

workflows:
  version: 2.1
  workflow:
    jobs:
      - build
