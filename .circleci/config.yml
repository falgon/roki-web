version: 2.1
parameters:
  GITHUB_SHA:
    type: string
    default: ""

jobs:
  build:
    docker:
    - image: circleci/golang:1.17.2
    resource_class: large
    environment:
      TZ: /usr/share/zoneinfo/Asia/Tokyo
    steps:
    - checkout
    - run:
        name: Set variables
        command: |
          echo 'export FN=<< pipeline.parameters.GITHUB_SHA >>-docs.tar.xz' >> $BASH_ENV
          echo 'export GOPATH="$HOME/.go"' >> $BASH_ENV
          echo 'export PATH="$HOME/.go/bin:$PATH"' >> $BASH_ENV
          echo "export ARTIFACTS_URL=\"https://output.circle-artifacts.com/output/job/$CIRCLE_WORKFLOW_JOB_ID/artifacts/$CIRCLE_NODE_INDEX/index.html\"" >> $BASH_ENV
          echo 'export ARTIFACTS_GDRIVE_PATH="CI_WORK/GitHubActions/$CIRCLE_PROJECT_REPONAME/$FN"' >> $BASH_ENV
          source "$BASH_ENV"
    - restore_cache:
        key: skicka-2021-11-06-latest
    - run:
        name: Setup tools
        command: |
          sudo apt-get -qq update && sudo apt-get install -qq -y --no-install-recommends jq
          if ! hash skicka 2>/dev/null; then
            go install github.com/google/skicka@latest
            skicka init
            echo -n "$SKICKA_TOKEN_CACHE_JSON" | base64 --decode > $HOME/.skicka.tokencache.json
            sed -i -e "s/;clientid=YOUR_GOOGLE_APP_CLIENT_ID/clientid=$GOOGLE_CLIENT_ID/g" $HOME/.skicka.config
            sed -i -e "s/;clientsecret=YOUR_GOOGLE_APP_SECRET/clientsecret=$GOOGLE_CLIENT_SECRET/g" $HOME/.skicka.config
          fi
          curl -sSL https://get.haskellstack.org/ | sh
    - save_cache:
        key: skicka-2021-11-06-latest
        paths:
          - ~/.go/bin
          - ~/.cache/go-build
          - ~/.skicka.tokencache.json
          - ~/.skicka.config
    - run:
        name: Fetch artifact from Google Drive
        command: |
          skicka -no-browser-auth download -ignore-times "$ARTIFACTS_GDRIVE_PATH" docs.tar.xz
          tar xvf docs.tar.xz
          skicka -no-browser-auth rm "$ARTIFACTS_GDRIVE_PATH"
    - store_artifacts:
        path: ./docs/
        destination: .
    - run:
        name: Add comment
        command: |
          PR_RESPONSE=$(curl -s --location --request GET \
            -H "Authorization: token $YBGH_TOKEN" \
            "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open")
          if [ -z "$PR_RESPONSE" ]; then
            echo "No PR found to update"
          else
            readonly pr_comment_url=$(echo "$PR_RESPONSE" | jq -r ".[]._links.comments.href")
            readonly status_badge_endpoint='https://dl.circleci.com/status-badge'
            readonly badge="[![CircleCI]($status_badge_endpoint/img/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH.svg?style=svg)]($status_badge_endpoint/redirect/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH)"
            curl -X POST \
              -H "Authorization: token $YBGH_TOKEN" \
              -H 'Content-Type:application/json' \
              -d '{"body":"* Status: $badge\r\n* [Build log]('"$CIRCLE_BUILD_URL)\r\n"'* Preview build with this PR (commit): <'"$ARTIFACTS_URL"'>"}' \
              "$pr_comment_url"
          fi
          echo "PR_RESPONSE='$PR_RESPONSE'" >> $BASH_ENV
          source "$BASH_ENV"
    - restore_cache:
        key: v1-notify-line-{{ checksum "tools/circleci/NotifyLine.hs" }}
    - run:
        name: Notify LINE
        command: |
          if [ -z "$PR_RESPONSE" ]; then
            echo "No PR found to update"
          else
            pr_url=$(echo "$PR_RESPONSE" | jq -r ".[]._links.html.href")
            # eval is needed for the CIRCLE_WORKING_DIRECTORY variable as it contains a non-expanded '~'
            eval ${CIRCLE_WORKING_DIRECTORY}/tools/circleci/NotifyLine.hs \
              --pr-url "$pr_url" \
              --artifacts-url "$ARTIFACTS_URL"
          fi
    - save_cache:
        key: v1-notify-line-{{ checksum "tools/circleci/NotifyLine.hs" }}
        paths:
          - ~/.stack

workflows:
  version: 2.1
  workflow:
    jobs:
      - build
